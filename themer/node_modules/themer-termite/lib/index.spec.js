'use strict';

var _index = require('./index');

var _themerColorsDefault = require('themer-colors-default');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } // vim: set ts=2 sw=2 expandtab :


describe('themer-termite', () => {

  it('should produce multiple files, one for each scheme', _asyncToGenerator(function* () {
    const files = yield Promise.all((0, _index.render)(_themerColorsDefault.colors, { colors: 'themer-colors-default' }));
    expect(files.length).toBe(Object.keys(_themerColorsDefault.colors).length);

    for (var i in files) {
      const scheme = files[i].name.split('.')[0];

      const fileContents = files[i].contents.toString('utf8');
      expect(/undefined/.test(fileContents)).toBe(false);
      expect(new RegExp(scheme).test(fileContents)).toBe(true);
    }
  }));

  const testSingleScheme = (message, colors) => {
    it(message, _asyncToGenerator(function* () {
      const files = yield Promise.all((0, _index.render)(colors, { colors: 'themer-colors-default' }));
      expect(files.length).toBe(Object.keys(colors).length);

      const scheme = files[0].name.split('.')[0];

      const fileContents = files[0].contents.toString('utf8');
      expect(/undefined/.test(fileContents)).toBe(false);
      expect(new RegExp(scheme).test(fileContents)).toBe(true);
    }));
  };

  testSingleScheme('should produce only one file, for the dark scheme', { dark: _themerColorsDefault.colors.dark });
  testSingleScheme('should produce only one file, for the light scheme', { light: _themerColorsDefault.colors.light });
});